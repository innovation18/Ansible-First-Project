version: 2.1

commands:
  create-stack:
    description: This command is to create-stack
    parameters:
      file-name:
        type: string
      # parameter-file-name:
      #   type: string
    steps:
      # - run: aws cloudformation create-stack
      #     --stack-name phoenix-${CIRCLE_WORKFLOW_ID}
      #     --template-body file://<< parameters.file-name >>
      #     --parameters file://<< parameters.parameter-file-name >>
      #     --region=us-west-2
      - run: aws cloudformation deploy
          --template-file file://<< parameters.file-name >>
          --stack-name backend-${CIRCLE_WORKFLOW_ID}
          # --parameter-overrides $(jq -r '.[] | [.ParameterKey, .ParameterValue] | "\(.[0])=\(.[1])"' file://<< parameters.parameter-file-name >>) --no-execute-changeset
          --parameter-overrides $(cat params.properties) --no-execute-changeset
          --region=us-west-2

  destroy-stack:
    steps:
      - run:
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name phoenix-${CIRCLE_WORKFLOW_ID}

jobs:
  create-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apk add --update curl
            pip install awscli
            pip install jq
      - create-stack:
          file-name: public-ec2-instance.yml
          # parameter-file-name: params.json

  collect-hosts-to-configure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Collect HOST IPs
          command: |
            sleep 130
            echo "[WEB]" > ~/inventory.txt
            # aws cloudformation describe-stacks --stack-name phoenix-${CIRCLE_WORKFLOW_ID} --profile phoenix | grep "StackStatus" | awk -F':' '{print $2}' |  awk '{ print substr( $0, 1, length($0)-1 ) }'
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["85:3f:c9:33:18:a1:fd:67:4f:c4:5f:6a:77:0a:21:d9"]
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt main.yml

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Test Site
          command: |
            if cat ~/inventory.txt | tail -1 | xargs curl -s --head | head -1 | grep 200
            then
              return 0
            else
              echo "You No Good!!!"
              return 1
            fi
      - destroy-stack

workflows:
  create-stack-workflow:
    jobs:
      - create-infrastructure
      - collect-hosts-to-configure:
          requires:
            - create-infrastructure
      - configure_infrastructure:
          requires:
            - create-infrastructure
            - collect-hosts-to-configure
      - smoke-test:
          requires:
            - configure_infrastructure
